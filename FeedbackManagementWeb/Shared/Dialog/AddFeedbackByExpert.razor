@using Domain.Entities;
@using Domain.Model;
@using Domain.Shared.Enums;
@using FeedbackManagementWeb.Interface;
@using FeedbackManagementWeb.Services;
@using Infrastructure.Exceptions;


<MudRTLProvider RightToLeft=true>
    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem md="4" sm="12" xs="12">
                    <MudTextField @bind-Value="_addFeedbackByExpertRequestModel.Title" Class="mt-1" T="string" Label="عنوان" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem md="4" sm="12" xs="12">
                    <MudSelect T="int" @bind-Value="_addFeedbackByExpertRequestModel.FkIdCustomer" Class="mt-1" Label="مشتری" Variant="Variant.Outlined">
                        @foreach (var item in customers)
                        {
                            <MudSelectItem Value="item.Id">@item.NameAndFamily</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="4" sm="12" xs="12">
                    <MudSelect T="int" @bind-Value="expertId" Class="mt-1" Label="متخصص" Variant="Variant.Outlined">
                        @foreach (var item in expertList)
                        {
                            <MudSelectItem Value="item.Id">@item.FirstName @item.LastName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem md="4" sm="6" xs="12">
                    <MudSelect T="int" @bind-Value="_addFeedbackByExpertRequestModel.FkIdProduct" Class="mt-1" Label="نوع محصول یا خدمات" Variant="Variant.Outlined">
                        @foreach (var item in products)
                        {
                            <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="4" sm="6" xs="12">
                    <MudSelect @bind-Value="_addFeedbackByExpertRequestModel.Priorty" Class="mt-1" Label="اولویت" Variant="Variant.Outlined">
                        <MudSelectItem Value="Priority.High">بالا</MudSelectItem>
                        <MudSelectItem Value="Priority.Medium">معمولی</MudSelectItem>
                        <MudSelectItem Value="Priority.Low">پایین</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem md="4" sm="6" xs="12">
                    <MudCheckBox @bind-Checked="_addFeedbackByExpertRequestModel.IsAnswered" Class="mt-1" Label="ثبت پاسخ"></MudCheckBox>
                </MudItem>
                <MudItem md="12" sm="12" xs="12">
                    <MudTextField @bind-Value="_addFeedbackByExpertRequestModel.Description" Class="mt-1" T="string" Label="شرح مشکل" Variant="Variant.Outlined" Lines="3" />
                </MudItem>
                @if (_addFeedbackByExpertRequestModel.IsAnswered)
                {
                    <MudItem md="12" sm="12" xs="12">
                        <MudTextField @bind-Value="_addFeedbackByExpertRequestModel.Respond" Class="mt-1" T="string" Label="پاسخ" Variant="Variant.Outlined" Lines="5" />
                    </MudItem>
                }
                else
                {
                    <MudItem md="12" sm="12" xs="12">
                        <MudTextField @bind-Value="_addFeedbackByExpertRequestModel.Respond" Disabled=true Class="mt-1" T="string" Label="پاسخ" Variant="Variant.Outlined" Lines="5" />
                    </MudItem>
                }

            </MudGrid>
        </DialogContent>

        <DialogActions>
            <MudButton StartIcon="@Icons.Filled.DoNotDisturbOn" Color=Color.Error OnClick="Cancel">لغو</MudButton>
            <MudButton StartIcon="@Icons.Filled.Done" Color="Color.Success" OnClick="AddFeedback">ارسال</MudButton>
        </DialogActions>
    </MudDialog>
</MudRTLProvider>


@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();

    [Inject]
    private IReportService reportService { get; set; } = default!;

    [Inject]
    private IFeedbackService feedbackService { get; set; } = default!;

    [Inject]
    private IExpertService ExpertService { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    IEnumerable<Product> products = new List<Product>();
    IEnumerable<Customer> customers = new List<Customer>();
    IEnumerable<Expert> expertList = new List<Expert>();

    private AddFeedbackByExpertRequestModel _addFeedbackByExpertRequestModel { get; set; } = new AddFeedbackByExpertRequestModel();

    private int expertId;

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        await GetSpecialties();
        await GetCustomer();
        await GetListExpert();
        _addFeedbackByExpertRequestModel.Priorty = Priority.Medium; 
    }

    private async Task GetListExpert()
    {
        try
        {
            expertList = await ExpertService.GetExperts();
            StateHasChanged();
        }
        catch (AppException ax)
        {
            Snackbar.Add(ax.Message, Severity.Warning);
        }
        catch (Exception)
        {
            Snackbar.Add("در واکشی اطلاعات خطایی رخ داده است", Severity.Error);
        }
    }

    private async Task GetSpecialties()
    {
        try
        {
            products = await reportService.GetProdcuts();
        }
        catch (AppException ax)
        {
            Snackbar.Add(ax.Message, Severity.Warning);
        }
        catch (Exception)
        {
            Snackbar.Add("در واکشی اطلاعات خطایی رخ داده است", Severity.Error);
        }
    }

    private async Task GetCustomer()
    {
        try
        {
            customers = await reportService.GetCustomers();
        }
        catch (AppException ax)
        {
            Snackbar.Add(ax.Message, Severity.Warning);
        }
        catch (Exception)
        {
            Snackbar.Add("در واکشی اطلاعات خطایی رخ داده است", Severity.Error);
        }
    }

    private async Task AddFeedback()
    {
        try
        {
            await feedbackService.AddfeedbackByExpert(new FeedbackBase
                {
                    Title = _addFeedbackByExpertRequestModel.Title,
                    Description = _addFeedbackByExpertRequestModel.Description,
                    FkIdCustomer = _addFeedbackByExpertRequestModel.FkIdCustomer,
                    FkIdProduct = _addFeedbackByExpertRequestModel.FkIdProduct,
                    Priorty = _addFeedbackByExpertRequestModel.Priorty,
                    Resources = string.Empty,
                    Source = Source.Site,
                    SourceAddress = "ثبت شده توسط متخصص"
                },expertId);
            Snackbar.Add("انتقاد جدید با موفقیت اضافه شد", Severity.Success);
            MudDialog.Close();
        }
        catch (AppException ne)
        {
            Snackbar.Add(ne.Message, Severity.Warning);
        }
        catch (Exception)
        {
            Snackbar.Add("در واکشی اطلاعات خطایی رخ داده است", Severity.Error);
        }
    }
}
